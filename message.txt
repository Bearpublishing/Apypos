import http.server
import socketserver
import json
import blowfish
import binascii
PORT = 80 
IP = "192.168.1.44"

key_hex = "FFFFFFFF00000000FFFFFFFF000000006E7900002D5700004F3F2D5600000000"


def encrptmhxr(data):
    plaintext_bytes = binascii.unhexlify(
        json.dumps(data, indent=4) .encode("utf-8").hex())
    key_bytes = binascii.unhexlify(key_hex)

    # Initialize Blowfish cipher with the key
    cipher = blowfish.Cipher(key_bytes)
    # Encrypt the data
    return b"".join(cipher.encrypt_ecb_cts(plaintext_bytes))


class CustomRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        print(self)
        if self.path == '/maintenance_env/schedule':
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()

            schedule_data = {
                "session_id": "1",
                "block_seq": "0",
                "app_ver": "09.03.06",
                "res_ver": "282",
                "error_code": "200",
                "now_time": 1,
                "relogin_time": 0,
                "start": 0,
                "end": 0,
                "url": "/http://"+IP+"/schedule/url",
                "master_list": [{"login_id": "1"}, {"login_id": "2"}]
            }

            # Convert the dictionary to a JSON string and encode it as bytes.
            response_data = json.dumps(schedule_data).encode('utf-8')

            self.wfile.write(response_data)
        elif self.path == '/09.03.06.json':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()

            # if new_ is enable it  will bring you to a webview
            version = {
                "res": "http://"+IP+"/res",
                "api": "http://"+IP+"/api",
                "web": "http://"+IP+"/web",
                "maintenance_bucket": "http://"+IP+"/",
                "maintenance_env": "maintenance_env",
                "REMOVEDnew_maintenance_bucket": "http://"+IP+"/",
                "REMOVEDnew_maintenance_env": "maintenance_env"
            }

            # Convert the dictionary to a JSON string and encode it as bytes.
            response_data = json.dumps(version).encode('utf-8')

            self.wfile.write(response_data)
        elif self.path == '/web/?login_id=&sec_id=&device_id=2':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()

            version = {
                "test": "content"
            }

            # Convert the dictionary to a JSON string and encode it as bytes.
            response_data = json.dumps(version).encode('utf-8')

            self.wfile.write(response_data)

        else:
            super().do_GET()

    def do_POST(self):
        print(self.path)
        if self.path == '/api/maintenance/check':
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            # unsure what controlls maitenance web_view  but its a combination of maitenance/check and /schedule)
            mcheck = {
                "is_maintenance": 0,
                "title_banner": {
                    "banner_id": "01",
                    "timeLeft": "0",
                    "type": "type",
                    "url": "http://"+IP+"/bannerurl"
                },
                "web_url": "http://"+IP+"/weburl"
            }

            self.wfile.write(encrptmhxr(mcheck))
        elif self.path == '/api/maintenance/titleimage/get':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()

            version = {
                "title_banner": {
                    "banner_id": "1",
                    "timeLeft": 200,
                    "type": "TypeA",
                    "url": "https://example.com/banner"
                },
                "title_image": {
                    "mst_title_image_id": 1,
                    "mst_title_logo_id": 1
                }
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/banner/dllist/get':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()
            # This looks to be where the download list is executed (THIS IS SENDING THE WRONG JSON atm idc because it skipped update)
            # {"download_list": [
            #         {
            #         "hash": 0,
            #         "path": "download.list?",
            #         "size": 0
            #         }
            # ]}
            version = {
                "title_banner": {
                    "banner_id": "Banner123",
                    "timeLeft": 1234567890,
                    "type": "TypeA",
                    "url": "https://example.com/banner"
                },
                "title_image": {
                    "mst_title_image_id": 987,
                    "mst_title_logo_id": 654
                }
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/welcome/safety/flag/get':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            # Not a clue SafetyNet Android flag???

            version = {
                "flag": 0
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/account/regist':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "game_id": "1",
                "is_review": 0,
                "login_id": "1",
                "stretch_effect_info": {
                    "exchange_present": 0,
                    "free_auto_add": 0,
                    "free_auto_infinity": 0,
                    "increase_add": 0,
                    "increase_inf": 0,
                    "mst_event_info_id": 0
                },
                "time_info": {
                    "end": 0,
                    "end_remain": 2,
                    "start": 0,
                    "start_remain": 2
                },
                "free_auto_add": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "free_auto_infinity": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "increase_add": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "tutorial_step": 1,
                "user_id": 1
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/account/login':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "game_id": "1",
                "is_review": 0,
                "login_id": "1",
                "stretch_effect_info": {
                    "exchange_present": 0,
                    "free_auto_add": 0,
                    "free_auto_infinity": 0,
                    "increase_add": 0,
                    "increase_inf": 0,
                    "mst_event_info_id": 0
                },
                "time_info": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "free_auto_add": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "free_auto_infinity": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "increase_add": {
                    "end": 0,
                    "end_remain": 0,
                    "start": 0,
                    "start_remain": 0
                },
                "tutorial_step": 1,
                "user_id": 1
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/quest/progress':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "continue_num": 3,
                "is_16multi": 0,
                "is_multi_play": 0,
                "is_progress": 0,
                "mst_quest_id": 0,
                "quest_instance_id": 0,
                "result_step": 0
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/quest/forest/progress':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "instance_id": 1,
                "mst_event_info_id": 1,
                "playing_node_info": {
                    "mst_forest_node_id": 1,
                    "mst_forest_quest_id": 1
                },
                "progress": 0
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/dictionary/equipment/get':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "mst_equipment_ids": [1, 2, 3, 4, 5]
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/tutorial/flag/get':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "flags": []
            }

            self.wfile.write(encrptmhxr(version))
        elif self.path == '/api/quest/forest/end':
            # Serve a specific JSON file
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.end_headers()

            version = {
                "boost_point_magnification": 0,
                "boost_type": 0,
                "campaign_value": 0,
                "enemy_point": 0,
                "equip_skill_magnification": 0,
                "event_item_skill_magnification": 0,
                "event_point_id": 0,
                "forest_equip_skill_magnification": 0,
                "is_complete_forest": 0,
                "mst_event_info_id": 0,
                "new_open_forest_node_id_list": [],
                "new_open_forest_quest_id_list": [],
                "now_fuel": 0,
                "pop_list": []

            }

            self.wfile.write(encrptmhxr(version))
        else:
            super().do_POST()


with socketserver.TCPServer(("", PORT), CustomRequestHandler) as httpd:
    print(f"Serving at port {PORT}")
    httpd.serve_forever()
